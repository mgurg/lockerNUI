// This file is auto-generated by @hey-api/openapi-ts

export const AnswerRequestSchema = {
    properties: {
        choice: {
            type: 'integer',
            exclusiveMinimum: 0,
            title: 'Choice'
        }
    },
    type: 'object',
    required: ['choice'],
    title: 'AnswerRequest'
} as const;

export const AnswerResponseSchema = {
    properties: {
        result: {
            type: 'string',
            title: 'Result'
        },
        correct: {
            type: 'boolean',
            title: 'Correct'
        }
    },
    type: 'object',
    required: ['result', 'correct'],
    title: 'AnswerResponse'
} as const;

export const CompaniesPaginatedSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CompanyIndexResponse'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        },
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        offset: {
            type: 'integer',
            title: 'Offset'
        }
    },
    type: 'object',
    required: ['data', 'count', 'limit', 'offset'],
    title: 'CompaniesPaginated'
} as const;

export const CompanyAddSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        brand: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Brand'
        },
        gov_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id'
        },
        gov_id_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gov Id Type'
        },
        place_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Place Id'
        },
        website: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Website'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        location: {
            '$ref': '#/components/schemas/LocationAdd'
        }
    },
    type: 'object',
    required: ['name', 'location'],
    title: 'CompanyAdd'
} as const;

export const CompanyIndexResponseSchema = {
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['uuid', 'name'],
    title: 'CompanyIndexResponse'
} as const;

export const CurrentPuzzleResponseSchema = {
    properties: {
        scenario: {
            type: 'string',
            title: 'Scenario'
        },
        base_hint: {
            type: 'string',
            title: 'Base Hint'
        },
        options: {
            items: {
                '$ref': '#/components/schemas/Option'
            },
            type: 'array',
            title: 'Options'
        },
        correct: {
            type: 'integer',
            title: 'Correct'
        },
        result: {
            type: 'string',
            title: 'Result'
        },
        wrong_feedback: {
            items: {
                '$ref': '#/components/schemas/WrongFeedback'
            },
            type: 'array',
            title: 'Wrong Feedback'
        },
        current_puzzle: {
            type: 'integer',
            title: 'Current Puzzle'
        }
    },
    type: 'object',
    required: ['scenario', 'base_hint', 'options', 'correct', 'result', 'wrong_feedback', 'current_puzzle'],
    title: 'CurrentPuzzleResponse'
} as const;

export const DepartmentAddSchema = {
    properties: {
        company_uuid: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company Uuid'
        },
        location: {
            '$ref': '#/components/schemas/LocationAdd'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['location', 'name'],
    title: 'DepartmentAdd'
} as const;

export const GameOutroSchema = {
    properties: {
        outro: {
            type: 'string',
            title: 'Outro'
        }
    },
    type: 'object',
    required: ['outro'],
    title: 'GameOutro'
} as const;

export const GameStartSchema = {
    properties: {
        theme: {
            type: 'string',
            maxLength: 100,
            title: 'Theme'
        },
        description: {
            type: 'string',
            maxLength: 140,
            title: 'Description'
        },
        difficulty: {
            type: 'string',
            maxLength: 100,
            title: 'Difficulty'
        },
        category: {
            type: 'string',
            maxLength: 100,
            title: 'Category'
        },
        occasion: {
            type: 'string',
            maxLength: 100,
            title: 'Occasion'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 100,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    required: ['theme', 'description', 'difficulty', 'category', 'occasion'],
    title: 'GameStart'
} as const;

export const GameStartResponseSchema = {
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Uuid'
        },
        token: {
            type: 'string',
            title: 'Token'
        },
        intro: {
            type: 'string',
            title: 'Intro'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['uuid', 'token', 'intro', 'created_at'],
    title: 'GameStartResponse'
} as const;

export const GeoNameAddSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        lang: {
            type: 'string',
            title: 'Lang'
        }
    },
    type: 'object',
    required: ['name', 'lang'],
    title: 'GeoNameAdd'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const IntroResponseSchema = {
    properties: {
        theme: {
            type: 'string',
            title: 'Theme'
        },
        intro: {
            type: 'string',
            title: 'Intro'
        }
    },
    type: 'object',
    required: ['theme', 'intro'],
    title: 'IntroResponse'
} as const;

export const LocationAddSchema = {
    properties: {
        street_address: {
            type: 'string',
            title: 'Street Address'
        },
        city: {
            type: 'string',
            title: 'City'
        },
        state_province: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Province'
        },
        postal_code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postal Code'
        },
        country: {
            type: 'string',
            pattern: '^\\w{2}$',
            title: 'Country'
        },
        located_in: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Located In'
        },
        type: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['company', 'department', 'room']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        lat: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lat'
        },
        lon: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lon'
        }
    },
    type: 'object',
    required: ['street_address', 'city', 'country'],
    title: 'LocationAdd'
} as const;

export const OptionSchema = {
    properties: {
        number: {
            type: 'integer',
            title: 'Number'
        },
        text: {
            type: 'string',
            title: 'Text'
        }
    },
    type: 'object',
    required: ['number', 'text'],
    title: 'Option'
} as const;

export const PlaceAddSchema = {
    properties: {
        lat: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lat'
        },
        lon: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lon'
        },
        lat_min: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lat Min'
        },
        lat_max: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lat Max'
        },
        lon_min: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lon Min'
        },
        lon_max: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lon Max'
        },
        population: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Population'
        },
        importance: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Importance'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        region: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Region'
        },
        country: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^\\w{2}$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        geo_names: {
            items: {
                '$ref': '#/components/schemas/GeoNameAdd'
            },
            type: 'array',
            title: 'Geo Names'
        }
    },
    type: 'object',
    required: ['lat', 'lon', 'lat_min', 'lat_max', 'lon_min', 'lon_max', 'population', 'importance', 'category', 'region', 'country', 'geo_names'],
    title: 'PlaceAdd'
} as const;

export const ReviewRequestSchema = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        score: {
            type: 'integer',
            title: 'Score'
        }
    },
    type: 'object',
    required: ['text', 'score'],
    title: 'ReviewRequest'
} as const;

export const RoomAddSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        company_uuid: {
            type: 'string',
            format: 'uuid',
            title: 'Company Uuid'
        },
        department_uuid: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Department Uuid'
        },
        price_from: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price From'
        },
        game_duration: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Game Duration'
        },
        players_min: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Players Min'
        },
        players_max: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Players Max'
        },
        reservation_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reservation Url'
        },
        lm_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lm Id'
        },
        mt_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mt Id'
        },
        location: {
            '$ref': '#/components/schemas/LocationAdd'
        },
        translation: {
            '$ref': '#/components/schemas/TranslationAdd'
        }
    },
    type: 'object',
    required: ['name', 'company_uuid', 'location', 'translation'],
    title: 'RoomAdd'
} as const;

export const TranslationAddSchema = {
    properties: {
        lang: {
            type: 'string',
            pattern: '^\\w{2}$',
            title: 'Lang'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        lead: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lead'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['lang', 'title'],
    title: 'TranslationAdd'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const WrongFeedbackSchema = {
    properties: {
        number: {
            type: 'integer',
            title: 'Number'
        },
        feedback: {
            type: 'string',
            title: 'Feedback'
        }
    },
    type: 'object',
    required: ['number', 'feedback'],
    title: 'WrongFeedback'
} as const;